###################################
# ~~~~~~~~~~~~~ Git ~~~~~~~~~~~~~ #
###################################

// logging
git log --oneline
git log --all --decorate --oneline --graph

// stages new and modified, without deleted
git add .
// stages all (include new files, modified and deleted)
git add -A
// stages modified and deleted, without new
git add -u

// commit
git commit -m "some message"
// push
git push <REMOTE> <BRANCH>

// list branches
git branch
// create branch locally
git branch <MY_BRANCH>
// create and checkout branch
git checkout -b <MY_BRANCH>
// delete branch locally
git branch -d <MY_BRANCH>
// delete branch remotely
git push origin --delete <MY_BRANCH>
// update removed branches from upstream (prune)
git fetch -p 

// view and update remote upstream
git remote -v
git remote add <NAME_UPSTREAM> <URL-UPSTREAM-REPO>
// check if remote is setup correctly
git ls-remote origin

// fetch all branches of upstream
git fetch <NAME_UPSTREAM>

// (forked repositories) merge or rebase remote branch into your main branch
// (remember to checkout to main)
git merge or rebase <NAME_UPSTREAM/BRANCH_MYBRANCH>

// submodules
git submodule update --init
git submodule status

// using correct credentials from .ssh config
ssh git@stephenfreedss:repo

// diff
git diff  // show modifications not yet staged
git diff --staged  // show modifications not yet committed
git diff head  // show all changes since last commit

// amend and rebase
git commit --amend
git rebase -i HEAD~4 (when text editor opens replace pick with reword and save)

// remove file from git, but not local file
git rm --cached <FILE_NAME>

###################################
# ~~~~~~~~~~~~~ Git ~~~~~~~~~~~~~ #
###################################


####################################
# ~~~~~~~~~~~~ MacOS ~~~~~~~~~~~~~ #
####################################

// process status (man ps)
ps aux | grep NAME

// brew list packages installed
brew list
// brew run background services like mysql (man brew services)
brew services list 
brew servcies start <SERVICE_NAME>
brew servcies stop <SERVICE_NAME>

####################################
# ~~~~~~~~~~~~ MacOS ~~~~~~~~~~~~~ #
####################################


#####################################
# ~~~~~~~~~~~~~ MySQL ~~~~~~~~~~~~~ #
#####################################

brew services start mysql
brew services stop mysql
brew services restart mysql
mysql -u <USER_NAME> -p <PASSWORD>
mysql -u <USER_NAME> -p <DB_NAME>  // remote login, then asks for password
show databases;
use <DATABASE_NAME>;
show tables;
desc <TABLE_NAME>;
create database <DATABASE_NAME>;
create user '<USER_NAME>'@'localhost' identified by '<PASSWORD>';
grant all on <DATABASE_NAME>.* to '<USER_NAME>'@'localhost';
flush privileges;

#####################################
# ~~~~~~~~~~~~~ MySQL ~~~~~~~~~~~~~ #
#####################################


####################################
# ~~~~~~~~~~~~ Linux ~~~~~~~~~~~~~ #
####################################

screen -ls
screen -S <name of socket>
ctrl a d to detach
ctrl a [ to scroll
screen -S <name of socket> -X kill

man hier
ssh-copy-id -i ~/.ssh/somename.pub user@ip
eval $(ssh-agent)

~~~ i ~~~
whoami
which
cd
cat
| grep

~~~ users ~~~
sudo adduser USERNAME (add user)
sudo usermod -a -G sudo USERNAME (add to group)
su USERNAME (switch user)

df -h --total (disk free)
ifconfig -a
ip addr show
top
ps aux
ps aux | grep "name-of-process"
kill PROCESSID
kill -9 PROCESSID # force 

cp -a /source/. /dest/  # copy all dir and files including hidden into another dir

echo $? # show exit code


ps aux  # monitor processes running on your Linux system
ifconfig -a
hostname -i
env
touch
df -h --total # available and used memory
systemctl status NAME # systemctl status NAME
systemctl start NAME
systemctl enable NAME
sudo lsof -i:22  # see a specific port such as 22 
sudo lsof -i -P -n | grep LISTEN
top

disk space
df -h --total # available and used memory
ncdu
sudo du -aBM -d 1 . | sort -nr | head -20


~~~ pass ~~~
sudo apt-get install rng-tools -y
sudo rngd -r /dev/urandom
sudo apt-get install pass -y
gpg --full-generate-key
mkdir ~/bin
echo ‘export PATH=$PATH:~/bin’ >> ~/.bash_aliases
wget https://github.com/docker/docker-credential-helpers/releases/docker-credential-pass-v0.6.4-amd64.tar.gz
tar xvzf docker-credential-pass-v0.6.3-amd64.tar.gz
chmod a+x docker-credential-pass
sudo cp docker-credential-pass /usr/local/bin
gpg --list-secret-keys
pass init STRING
pass insert docker-credential-helpers/docker-pass-initialized-check

####################################
# ~~~~~~~~~~~~ Linux ~~~~~~~~~~~~~ #
####################################


####################################
# ~~~~~~~~~~~~ Ubuntu ~~~~~~~~~~~~~#
####################################

sudo apt update && sudo apt upgrade -y

~~~ remove package ~~~
apt-get remove packagename  # remove the binaries, but not the configuration or data files of the packages
apt-get purge packagename  # will remove about everything regarding the package packagename, but not the dependencies installed with it on installation
apt-get autoremove  # removes orphaned packages, i.e. installed packages that used to be installed as an dependency, but aren't any longer

--- install python ---
sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt install python3
sudo apt install python3-pip

sudo apt-get update
sudo apt install ubuntu-desktop (install gui on server)

# remove gui from server (add -y flag)
sudo apt purg ubuntu-desktop
sudo apt autoremove
sudo apt autoclean

systemctl status NAME
systemctl start NAME
systemctl enable NAME
hostname -i

sudo lsof -i:22  # see a specific port such as 22 
sudo lsof -i -P -n | grep LISTEN

history -c && history -w  # clear bash history and remove from memory

timedatectl
timedatectl list-timezones
sudo timedatectl set-timezone <your_time_zone>

####################################
# ~~~~~~~~~~~~ Ubuntu ~~~~~~~~~~~~~#
####################################


##########################################
# ~~~~~~~~~~~~~ SpringBoot ~~~~~~~~~~~~~ #
##########################################

curl https://start.spring.io

curl https://start.spring.io/starter.zip \
-d applicationName=App-Name\
-d type=maven-project \
-d language=java \
-d bootVersion=2.6.3 \    # UPDATE THIS
-d groupId=com.exampleurl \
-d artifactId=appname \
-d packageName=com.exampleurl.appname \
-d description=SpringBoot-Application \
-d packageName=com.exampleurl.appname \
-d packaging=jar \
-d javaVersion=17 \
-d name=appname \
-o SpringBootInit.zip \
-d dependencies=web \

mvn --version
mvn dependency:resolve
mvn -Dmaven.test.failure.ignore=true clean install
mvn clean install -DskipTests

##########################################
# ~~~~~~~~~~~~~ SpringBoot ~~~~~~~~~~~~~ #
##########################################


######################################
# ~~~~~~~~~~~~~ Python ~~~~~~~~~~~~~ #
######################################

# venv naming convention
my_project_venv

# create venv with python 3
python3 -m venv NAME-OF-ENVIRONMENT

# activate venv
source VENV_DIR/bin/activate

# check correct python is being used
which python or pip

# In venv use python and pip without the 3
python and pip

# deactivate venv
deactivate

# create requirements.txt
pip freeze > requirements.txt

# install requirements.txt
pip install -r requirements.txt

# pip uninstall all packages(make requirements.txt file first)
pip uninstall -y -r <(pip freeze)  # doesn't make file just removes

# show installed and not their dependencies
pip list --not-required

# show package dependencies
pip show package_name

dir_path = os.path.dirname(os.path.realpath(__file__)) + "/"
sys.path.append(dir_path)

######################################
# ~~~~~~~~~~~~~ Python ~~~~~~~~~~~~~ #
######################################


####################################
# ~~~~~~~~~~~~ Flask ~~~~~~~~~~~~~ #
####################################

# set app name in terminal
set FLASK_APP=app_name.py # Windows
export FLASK_APP=app_name.py # Mac/Linux

# set debug
set FLASK_DEBUG=1 # Windows
export FLASK_DEBUG=1 # Mac/Linux

# run Flask
flask run

# run app with debug in "if name main"
python app.py

####################################
# ~~~~~~~~~~~~ Flask ~~~~~~~~~~~~~ #
####################################


######################################
# ~~~~~~~~~~~~ Vagrant ~~~~~~~~~~~~~ #
######################################

vagrant init (template file)
vagrant init IMAGE/NAME (ubuntu/xenial64)
vagrant up
vagrant halt 
vagrant suspend
vagrant resume
vagrant reload
vagrant ssh
vagrant status
vagrant global-status

ubuntu screen resize problem
sudo apt-get install virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11

######################################
# ~~~~~~~~~~~~ Vagrant ~~~~~~~~~~~~~ #
######################################


#####################################
# ~~~~~~~~~~~~ Docker ~~~~~~~~~~~~~ #
#####################################

sudo usermod -aG docker $USER

service docker restart

docker pull IMAGENAME
docker images
docker images --digests

docker ps (process status)
docker ps -a

docker volume create VOLUMENAME
docker volume ls
docker volume inspect VOLUMENAME
docker volume rm VOLUMENAME

docker network create NETWORKNAME
docker network ls
docker network inspect NETWORKNAME
docker network rm NETWORKNAME
docker container inspect CONTAINERNAME
docker network create --driver=bridge --subnet=172.20.0.0/16 --ip-range=172.20.20.0/24 --gateway=172.20.20.1 aline-bridge

docker run hello-world (pulls image if needed)
docker run -it IMAGENAME bash (interactive mode with bash as command)
docker run --name=containername -d --rm IMAGENAME (name container / run in detached mode / rm container after running)
docker run --name containername -d -p 8080:80 IMAGENAME (expose ports host:container)
docker run --name containername -d -p 8080:80 -v VOLUMENAME:/etc/todos IMAGENAME (mount volume to path)
docker run --name containername -d -p 8080:80 --network=NETWORKNAME IMAGENAME (specifies container network)

docker exec -it NAMEOFCONTAINER /bin/bash  # ssh into running container to do things like MySQL

docker stop CONTAINERNAME (stop running container)
docker start CONTAINERNAME (run existing container)
docker kill $(docker ps -q)  # stop all running containers

docker exec -it CONTAINERNAME bash (run a command in a running container)
docker logs CONTAINERNAME (show logs)
docker port CONTAINERNAME (show ports)
docker container top CONTAINERNAME (processes running inside container)
docker image inspect CONTAINERNAME (image layers)

docker rm CONTAINERNAME
docker rm $(docker ps -a -q)  # remove all containers
docker image rm IMAGENAME
docker image prune
docker container prune (remove all stopped containers)
docker system prune (remove all unused containers, networks, images)

docker build -t NEWNAME:v1.0 . (t for tag / builds image if Dockerfile in current directory)
docker tag REPO:TAG NEWREPO:NEWTAG (rename image)
docker commit RUNNINGCONTAINER REPO:TAG (create new image from running container)
docker image push IMAGENAME:TAG

docker-compose --version
docker-compose up
docker-compose down

sudo systemctl status docker (ubuntu)
sudo systemctl enable --now docker (ubuntu)
docker stats

docker context ls
docker context create CONTEXTNAME
docker context use CONTEXTNAME


docker context create ecs sf-compose-up --profile aline-sf
docker context use sf-compose-up
docker compose ps --format json
docker compose convert

export DOCKER0_IP=$(docker network inspect --format='{{(index .IPAM.Config 0).Gateway}}' bridge)

echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
docker context create ecs ${AWS_PROFILE} --profile ${AWS_PROFILE}

#####################################
# ~~~~~~~~~~~~ Docker ~~~~~~~~~~~~~ #
#####################################


#########################################
# ~~~~~~~~~~~~ Kubernetes ~~~~~~~~~~~~~ #
#########################################

minikube start --driver=docker --ports=30000:30000
kubectl apply -f FILENAME
kubectl port-forward --address 0.0.0.0 service/aline-gateway 8080:8080
kubectl port-forward --address 0.0.0.0 --namespace ingress-nginx service/ingress-nginx-controller 8080:80

minikube ip
minikube service list
kubectl cluster-info
kubectl config view

kubectl get node -o wide
kubectl get events
kubectl get namespaces
kubectl get all
kubectl get pod -A
kubectl get endpoints
kubectl get ingress

kubectl delete  

kubectl api-resources -o wide
kubectl get events
kubectl logs PODNAME
kubectl describe service NAMEOFSERVICE
docker port minikube
minikube service aline-user-service --url

kubectl exec -it <pod_name> bash
kubectl exec -it <pod/pod_name> bash
echo -n 'input' | base64
kubectl logs <pod>
# get secrets
kubectl get secret -n gitlab gitlab-tls -o json | jq -r '.data."tls.key"' | base64 -d
kubectl get secret gitlab-tls -n gitlab -o yaml
kubectl get events --sort-by=’.lastTimestamp’


#########################################
# ~~~~~~~~~~~~ Kubernetes ~~~~~~~~~~~~~ #
#########################################

###################################
# ~~~~~~~~~~~~ HELM ~~~~~~~~~~~~~ #
###################################
helm repo list
helm search repo <name>
ws ecr get-login-password \
     --region us-west-2 | helm registry login \
     --username AWS \
     --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
helm pull oci://<ecr url with repo>

###################################
# ~~~~~~~~~~~~ HELM ~~~~~~~~~~~~~ #
###################################


########################################
# ~~~~~~~~~~~~ Terraform ~~~~~~~~~~~~~ #
########################################

terraform init -backend-config=backend.hcl
terraform plan -var-file=input.tfvars
terraform apply -var-file=input.tfvars -auto-approve

// list resources deployed under state file
terraform state list

// will display all the outputs for the root module
// if an output name is specified, only the value of that output is printed
terraform output

// 
terraform show

// format terraform file
terraform fmt

// write output to json file
terraform plan -json -var-file=input.tfvars > tfplan_output.json

########################################
# ~~~~~~~~~~~~ Terraform ~~~~~~~~~~~~~ #
########################################


######################################
# ~~~~~~~~~~~~ AWS CLI ~~~~~~~~~~~~~ #
######################################

aws logs put-log-events --log-group-name SF-Jenkins-Logs --log-stream-name Jenkins-Bash-Scripts --log-events timestamp=$(date +%s%3N),message="this is a test error"
aws logs describe-log-streams --log-group-name SF-Jenkins-Logs --query 'logStreams[?logStreamName ==`'Jenkins-Bash-Scripts'`].[uploadSequenceToken]' --output text

######################################
# ~~~~~~~~~~~~ AWS CLI ~~~~~~~~~~~~~ #
######################################


######################################
# ~~~~~~~~~~~~ Ansible ~~~~~~~~~~~~~ #
######################################

ansible <ip_address_or_group> -i <inventory_file> -m <module> -u <username> -k <password_prompt> -vvv --become
ansible-doc <word>
ansible-doc -l  # list all currunt modules
ansible <name> -i inventory.yaml -m setup
ansible-playbook -i inventory.yaml playbook.yaml

~~~ dynamic inventory ~~~
ansible-inventory -i inventory.yaml --list
ansible-inventory -i inventory.yaml --graph

######################################
# ~~~~~~~~~~~~ Ansible ~~~~~~~~~~~~~ #
######################################


#####################################
# ~~~~~~~~~~~~ Golang ~~~~~~~~~~~~~ #
#####################################

// creates go.mod
go mod init "<MODULE_NAME>"
// gets and updates packages and their dependencies
go mod tidy


// compiles and runs the named main go package
go run 
// compiles into binaries
go build
// runs files ending in _test.go
go test
// terratest
go test -v -timeout 30m

// show golang env's
go env
// set where go binaries are installed
go env -w GOBIN=/user_root/go/bin
// use this to clear go env
go env -u <GO_ENV>

#####################################
# ~~~~~~~~~~~~ Golang ~~~~~~~~~~~~~ #
#####################################


#####################################
# ~~~~~~~~~~~~   C++  ~~~~~~~~~~~~~ #
#####################################
clang++ FILENAME -o OUTPUTFILENAME
./OUTPUTFILENAME


#####################################
# ~~~~~~~~~~~~   C++  ~~~~~~~~~~~~~ #
#####################################
 
####################################
# ~~~~~~~~~~~~  SQL  ~~~~~~~~~~~~~ #
####################################
SELECT * FROM table;

CREATE DATABASE database_name;
DROP DATABASE database_name;


USE table_name;

CREATE TABLE table_name (
            test_column INT
        );


ALTER TABLE table_name
ADD another_column VARCHAR(255);
####################################
# ~~~~~~~~~~~~  SQL  ~~~~~~~~~~~~~ #
####################################

####################################
# ~~~~~~~~~~~~  JQ   ~~~~~~~~~~~~~ #
####################################

curl -s "something.com" | jq -r '.content' | base64 -D > testing.yaml

####################################
# ~~~~~~~~~~~~  JQ   ~~~~~~~~~~~~~ #
####################################
